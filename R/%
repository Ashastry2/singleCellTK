DownsampleMatrix.R:  resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*%
DownsampleMatrix.R:  resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*%
DownsampleMatrix.R:  rss1 <- resid ^ 2 %*% rep(1, n)
DownsampleMatrix.R:  rss0 <- resid0 ^ 2 %*% rep(1, n)
DownsampleMatrix.R:        outmat[((i - 1) %% dim(datamatrix)[1]) + 1,
abundance.R:      !cluster %in% names(SummarizedExperiment::colData(inSCE))) {
abundance.R:      !variable %in% names(SummarizedExperiment::colData(inSCE))) {
abundance.R:  if (!all(control %in% variable)) {
abundance.R:    nf1 <- control[which(!control %in% variable)]
abundance.R:  if (!all(case %in% variable)) {
abundance.R:    nf2 <- case[which(!case %in% variable)]
abundance.R:  if (any(control %in% case)) {
abundance.R:  label[variable %in% case] <- case.lab
abundance.R:  label[variable %in% control] <- control.lab
abundance.R:    cluster.factor <- factor(ifelse(cluster %in% cluster.label[i],
abundance.R:  if (!"diffAbundanceFET" %in% names(S4Vectors::metadata(inSCE))) {
abundance.R:      !cluster %in% names(SummarizedExperiment::colData(inSCE))) {
abundance.R:      !variable %in% names(SummarizedExperiment::colData(inSCE))) {
celda_decontX.R:      if (!sample %in% names(SummarizedExperiment::colData(inSCE))) {
celda_decontX.R:  #argsList <- argsList[!names(argsList) %in% ("...")]
combineSCE.R:    missRow <- row[!row %in% rownames(x)]
combineSCE.R:    missCol <- col[!col %in% colnames(x)]
combineSCE.R:    x <- lapply(sceList, function(x) {if (reduceDim %in% SingleCellExperiment::reducedDimNames(x)) {SingleCellExperiment::reducedDim(x, reduceDim)}})
combineSCE.R:      if (DimName %in% names(redMat)) {
combineSCE.R:      if (assayName %in% names(assay)) {
combineSCE.R:#   if ("runBarcodeRanksMetaOutput" %in% metaNames) {
combineSCE.R:  if ("runBarcodeRanksMetaOutput" %in% metaNames) {
combineSCE.R:  if ("assayType" %in% metaNames) {
computeHeatmap.R:  #ncol <- ncol %||% ifelse(test = length(x = dims) > 2, yes = 3,
computeHeatmap.R:  # assays <- assays %||% Seurat::DefaultAssay(object = object)
computeHeatmap.R:  # disp.max <- disp.max %||% ifelse(
computeHeatmap.R:  # cells <- cells %||% ncol(x = object)
convertGeneIDs.R:  if (!(database %in% c("org.Ag.eg.db", "org.At.tair.db", "org.Bt.eg.db",
convertGeneIDs.R:  if (!(database %in% as.character(grep("^org\\.",
convertGeneIDs.R:  if (!(database %in% (.packages()))){
decorate.R:`%@%` = function (decorator, f) UseMethod('%@%')
decorate.R:`%@%.default` = function (decorator, f)
decorate.R:`%@%.decorator` = function (decorator, f) {
decorate.R:    cat(deparse(decorator), '%@%\n')
decorate.R:simpleLog <- decorator %@% function(f) {
doubletFinder_doubletDetection.R:                    pN[n] * 100, "%", sep = ""))
doubletFinder_doubletDetection.R:    argsList <- argsList[!names(argsList) %in% ("...")]
doubletFinder_doubletDetection.R:  '%ni%' <- Negate('%in%')
doubletFinder_doubletDetection.R:  if ("AUC" %ni% colnames(sweep.stats) == TRUE) {
doubletFinder_doubletDetection.R:  if ("AUC" %in% colnames(sweep.stats) == TRUE) {
dropletUtils_emptyDrops.R:  argsList <- argsList[!names(argsList) %in% c("BPPARAM")]
enrichRSCE.R:  if (!all(glist %in% rownames(inSCE))){
enrichRSCE.R:  if (!all(db %in% enrdb)){
enrichRSCE.R:      temp_db$link[which(temp_db$libraryName %in% x)]
featureIndex.R:      if (!(by %in% colnames(rowData(inSCE)))) {
featureIndex.R:      if (!(by %in% colnames(inSCE))) {
findMarker.R:  if(!useAssay %in% expDataNames(inSCE)){
findMarker.R:    if(!cluster %in% names(SummarizedExperiment::colData(inSCE))){
findMarker.R:    uniqClust <- levelOrder[levelOrder %in% uniqClust]
findMarker.R:  markerTable <- markerTable[markerTable$Gene %in% rownames(inSCE),]
findMarker.R:  if(!'findMarker' %in% names(S4Vectors::metadata(inSCE))){
findMarker.R:  if(!all(c("Gene", "Pvalue", "Log2_FC", "FDR") %in%
findMarker.R:  if(length(which(!degFull$Gene %in% rownames(inSCE))) > 0){
findMarker.R:    degFull <- degFull[-which(!degFull$Gene %in% rownames(inSCE)),]
findMarker.R:  degFull <- degFull[degFull$Gene %in% selected,]
findMarker.R:      if(!orderBy %in% c('size', 'name')){
findMarker.R:    }# else if(any(!SummarizedExperiment::colData(inSCE)[[cluster]] %in%
findMarker.R:    z.order <- z.order[z.order %in% as.vector(unique(z))]
findMarker.R:      z.order <- orderBy[-which(!orderBy %in% z)]
getCluster.R:    if (!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
getCluster.R:    if (!useReducedDim %in% SingleCellExperiment::reducedDimNames(inSCE)) {
getCluster.R:    if (!useAltExp %in% SingleCellExperiment::altExpNames(inSCE)) {
getCluster.R:      if (!altExpRedDim %in% SingleCellExperiment::reducedDimNames(ae)) {
getCluster.R:      if (!altExpAssay %in% SummarizedExperiment::assayNames(ae)) {
getCluster.R:  if (!useReducedDim %in% SingleCellExperiment::reducedDimNames(inSCE)) {
getTSNE.R:    if (!(useAltExp %in% SingleCellExperiment::altExpNames(inSCE))) {
getTSNE.R:    if (!(useAssay %in% SummarizedExperiment::assayNames(sce))) {
getTSNE.R:    if (!(useAssay %in% SummarizedExperiment::assayNames(inSCE))) {
getUMAP.R:      if (!useReducedDim %in% SingleCellExperiment::reducedDimNames(inSCE)) {
getUMAP.R:        if (!useAltExp %in% SingleCellExperiment::altExpNames(inSCE)) {
getUMAP.R:        if (!useAssay %in% SummarizedExperiment::assayNames(sce)) {
getUMAP.R:        if (!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
getUMAP.R:      if (!sample %in% names(SummarizedExperiment::colData(inSCE))) {
ggPerQCWrapper.R:      ylab="Gene expression percentage (%)",
ggPerQCWrapper.R:        ylab="Gene expression percentage (%)",
ggPerQCWrapper.R:    if(combinePlot %in% c("all", "sample")){
ggPerQCWrapper.R:    if(combinePlot %in% c("all", "sample")){
ggPerQCWrapper.R:    if(combinePlot %in% c("all", "sample")){
ggPerQCWrapper.R:    if(combinePlot %in% c("all", "sample")){
ggPerQCWrapper.R:    if("scds_cxds_call" %in% names(SingleCellExperiment::colData(inSCE))){
ggPerQCWrapper.R:    if(combinePlot %in% c("all", "sample")){
ggPerQCWrapper.R:    if("scds_bcds_call" %in% names(SingleCellExperiment::colData(inSCE))){
ggPerQCWrapper.R:    if(combinePlot %in% c("all", "sample")){
ggPerQCWrapper.R:    if("scds_hybrid_call" %in% names(SingleCellExperiment::colData(inSCE))){
ggPerQCWrapper.R:    if(combinePlot %in% c("all", "sample")){
ggPerQCWrapper.R:    if(combinePlot %in% c("all", "sample")){
ggPlotting.R:        if (!(dim1 %in% colnames(dataframe))) {
ggPlotting.R:        if (!(dim2 %in% colnames(dataframe))) {
ggPlotting.R:      if (conditionClass %in% c("character", "factor", "numeric")) {
ggPlotting.R:    if (isTRUE(labelClusters) && class(colorBySub) %in% c("character", "factor")) {
ggPlotting.R:  if(combinePlot %in% c("all", "sample")){
ggPlotting.R:    }else if (!slot %in% methods::slotNames(inSCE)) {
ggPlotting.R:    if (!annotation %in% names(sceSubset)) {
ggPlotting.R:    if (feature %in% rownames(counts)) {
ggPlotting.R:#' @importFrom dplyr %>%
ggPlotting.R:      summ <- df %>% dplyr::group_by(groupBy) %>% dplyr::summarize(value = base::mean(y))
ggPlotting.R:      summ <- df %>% dplyr::group_by(groupBy) %>% dplyr::summarize(value = stats::median(y))
ggPlotting.R:    if (!coldata %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:      if (!groupBy %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:  if(combinePlot %in% c("all", "sample")){
ggPlotting.R:      if (!groupBy %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:  if(combinePlot %in% c("all", "sample")){
ggPlotting.R:    if (!slotName %in% c("rowData", "colData", "assays", "metadata", "reducedDims")) {
ggPlotting.R:    if (!itemName %in% names(sceSubset)) {
ggPlotting.R:        if (feature %in% rownames(counts)) {
ggPlotting.R:            if (!groupBy %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:    if(combinePlot %in% c("all", "sample") &&
ggPlotting.R:    if (!coldata %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:      if (!groupBy %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:  if(combinePlot %in% c("all", "sample")){
ggPlotting.R:      if (!groupBy %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:  if(combinePlot %in% c("all", "sample")){
ggPlotting.R:    if (!slotName %in% c("rowData", "colData", "assays", "metadata", "reducedDims")) {
ggPlotting.R:    if (!itemName %in% names(sceSubset)) {
ggPlotting.R:        if (feature %in% rownames(counts)) {
ggPlotting.R:            if (!groupBy %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:    if(combinePlot %in% c("all", "sample")){
ggPlotting.R:      if(combinePlot %in% c("all") && length(unique(sample)) > 1){
ggPlotting.R:#' @importFrom dplyr %>%
ggPlotting.R:      summ <- df %>% dplyr::group_by(groupBy) %>% dplyr::summarize(value = base::mean(y))
ggPlotting.R:      summ <- df %>% dplyr::group_by(groupBy) %>% dplyr::summarize(value = stats::median(y))
ggPlotting.R:    if (!coldata %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:      if (!groupBy %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:      if (!groupBy %in% names(SummarizedExperiment::colData(inSCE))) {
ggPlotting.R:  if ("Violin" %in% names(plotlist)) {
ggPlotting.R:  if ("Sample" %in% names(plotlist)) {
ggPlotting.R:      if(all(class(x) %in% c("gg","ggplot"))){
htmlReports.R:  if (!study %in% names(S4Vectors::metadata(inSCE)$diffExp)) {
htmlReports.R:  if (!"findMarker" %in% names(S4Vectors::metadata(inSCE))) {
htmlReports.R:  if (!"useAssay" %in% att) {
htmlReports.R:  if(!biological.group %in% names(colData(inSCE))){
htmlReports.R:    if(!all(phenotype.groups %in% names(colData(inSCE)))){
importAlevin.R:  if ('counts' %in% names(ma)) {
importCellRanger.R:    if (any(!(gzipped %in% c("auto", TRUE, FALSE)))) {
importCellRanger.R:        if (!(length(cellRangerOuts) %in% c(0, 1))) {
importCellRanger.R:            if (!(length(cellRangerOuts) %in% c(0, 1))) {
importCellRanger.R:            if (!(length(cellRangerOuts) %in% c(0, 1))) {
importDropEst.R:    if (field %in% names(dropEst_rds)){
importDropEst.R:    coldata_df_merged <- coldata_df_merged[coldata_df_merged$cell %in% colnames(counts_matrix),]
importDropEst.R:    if (md %in% names(dropEst_rds)){
importDropEst.R:  if (dataType == 'filtered' && 'cm' %in% names(dropEst_rds)) {
importDropEst.R:  } else if (dataType == 'raw' && 'cm_raw' %in% names(dropEst_rds)) {
importExampleData.R:  if(dataset %in% scRNAseqDatasets) {
importExampleData.R:    if(!("scRNAseq" %in% rownames(utils::installed.packages()))) {
importExampleData.R:  } else if (dataset %in% tenxPbmcDatasets) {
importExampleData.R:    if(!("TENxPBMCData" %in% rownames(utils::installed.packages()))) {
importGeneSets.R:  if(!all(by %in% c("rownames", colnames(rowData(inSCE))))) {
importGeneSets.R:  if(!all(location %in% c("rownames", colnames(rowData(inSCE))))) {
importGeneSets.R:    if(collectionName %in% names(S4Vectors::metadata(inSCE)$sctk$genesets)) {
importGeneSets.R:    old.gsc <- old.gsc[!(names(old.gsc) %in% names(new.gsc))]
importGeneSets.R:  if(!(species %in% all.species)) {
importGeneSets.R:  if(!(by %in% c("rownames", colnames(rowData(inSCE))))) {
importGeneSets.R:  if(!all(categoryIDs %in% msigdb_table$ID)) {
importGeneSets.R:      if(j %% 1000 == 0) {
importGeneSets.R:  if (!id %in% c("symbol", "entrez", "ensemble", "ensemble_transcriptID")) {
importGeneSets.R:  if (!reference %in% c("human", "mouse")) {
importGeneSets.R:  if (!target %in% names(MitoGenes)) {
importGeneSets.R:    if(collectionName %in% names(S4Vectors::metadata(inSCE)$sctk$genesets)) {
importSeqc.R:    missGene <- geneUnion[!geneUnion %in% rownames(matrix)]
labelCellType.R:    if(!useAssay %in% expDataNames(inSCE)){
labelCellType.R:            if (!labelColName %in% SummarizedExperiment::colData(ref)) {
mergeSCEColData.R:  if (id1 == "column_name" && "column_name" %in%
mergeSCEColData.R:  if (id2 == "column_name" && "column_name" %in%
miscFunctions.R:    if(!(sampleVariableName %in% colnames(colData(inSCE)))) {
miscFunctions.R:  if (!(all(hues %in% grDevices::colors()))) {
miscFunctions.R:  if(!axis %in% c('row', 'col', 'cell', 'feature', 'gene')){
miscFunctions.R:  if(axis %in% c('row', 'feature', 'gene')){
miscFunctions.R:    if(!by %in% colnames(data)){
miscFunctions.R:      Indices <- which(search %in% IDs)
miscFunctions.R:      notFound <- which(!IDs %in% search)
miscFunctions.R:      dupMatched <- unique(IDs[duplicated(IDs[IDs %in% search])])
miscFunctions.R:  if(!geneSetCollectionName %in% names(gs)) {
plotBatchVariance.R:    if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)){
plotBatchVariance.R:    if(!useReddim %in% SingleCellExperiment::reducedDimNames(inSCE)){
plotBatchVariance.R:    if(!useAltExp %in% SingleCellExperiment::altExpNames(inSCE)){
plotBatchVariance.R:    if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
plotBatchVariance.R:  resid <- dat - dat %*% mod %*% solve(t(mod) %*% mod) %*% t(mod)
plotBatchVariance.R:  resid0 <- dat - dat %*% mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0)
plotBatchVariance.R:  resid00 <- dat - dat %*% mod00 %*% solve(t(mod00) %*% mod00) %*% t(mod00)
plotBatchVariance.R:    if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)){
plotBatchVariance.R:    if(!useReddim %in% SingleCellExperiment::reducedDimNames(inSCE)){
plotBatchVariance.R:    if(!useAltExp %in% SingleCellExperiment::altExpNames(inSCE)){
plotBatchVariance.R:    if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
plotBiomarker.R:  if(!(reducedDimName %in% names(SingleCellExperiment::reducedDims(inSCE)))){
plotBiomarker.R:    if (!(x %in% colnames(axisDf))){
plotBiomarker.R:    if (!(y %in% colnames(axisDf))){
plotBiomarker.R:        ggplot2::ggtitle(paste(geneName, " - ", percent, "%", " cells",
plotBiomarker.R:            x = paste0(x, " ", toString(round(variances[x, ] * 100, 2)), "%"),
plotBiomarker.R:            y = paste0(y, " ", toString(round(variances[y, ] * 100, 2)), "%"))
plotDEAnalysis.R:  if(!'diffExp' %in% names(S4Vectors::metadata(inSCE))){
plotDEAnalysis.R:  if(!useResult %in% names(S4Vectors::metadata(inSCE)$diffExp)){
plotDEAnalysis.R:  if(!all(c('groupNames', 'select', 'result', 'useAssay') %in% names(result))){
plotDEAnalysis.R:    if(!labelBy %in% names(SummarizedExperiment::rowData(inSCE))){
plotDEAnalysis.R:  if(any(warnArgs %in% names(extraArgs))){
plotDEAnalysis.R:    warning('"', paste(warnArgs[warnArgs %in% names(extraArgs)],
plotDEAnalysis.R:  gene.ix <- rownames(inSCE) %in% deg.filtered$Gene
plotDEAnalysis.R:    if(!all(allCells %in% rownames(cellAnnotations))){
plotDEAnalysis.R:    if(!"condition" %in% names(cellAnnotationColor)){
plotDEAnalysis.R:    if (length(which(colDataName %in% result$annotation)) > 0) {
plotDEAnalysis.R:      colDataName <- colDataName[-which(colDataName %in% result$annotation)]
plotDEAnalysis.R:  regulation[rownames(inSCE) %in% genes.up] <- 'up'
plotDEAnalysis.R:  regulation[rownames(inSCE) %in% genes.down] <- 'down'
plotDEAnalysis.R:    if(!all(allGenes %in% rownames(featureAnnotations))){
plotDEAnalysis.R:    if(!"regulation" %in% names(featureAnnotationColor)){
plotMarkerDiffExp.R:    if(!'findMarker' %in% names(S4Vectors::metadata(inSCE))){
plotMarkerDiffExp.R:            if(!orderBy %in% c('size', 'name')){
plotMarkerDiffExp.R:        }# else if(any(!SummarizedExperiment::colData(inSCE)[[cluster]] %in%
plotMarkerDiffExp.R:    if(!all(c("Gene", "Pvalue", "Log2_FC", "FDR") %in%
plotMarkerDiffExp.R:    if(length(which(!degFull$Gene %in% rownames(inSCE))) > 0){
plotMarkerDiffExp.R:      degFull <- degFull[-which(!degFull$Gene %in% rownames(inSCE)),]
plotMarkerDiffExp.R:    degFull <- degFull[degFull$Gene %in% selected,]
plotMarkerDiffExp.R:        z.order <- z.order[z.order %in% as.vector(unique(z))]
plotMarkerDiffExp.R:            z.order <- orderBy[-which(!orderBy %in% z)]
plotPCA.R:  if(!(reducedDimName %in% names(SingleCellExperiment::reducedDims(inSCE)))){
plotPCA.R:  if (!(pcX %in% colnames(pcaDf))){
plotPCA.R:  if (!(pcY %in% colnames(pcaDf))){
plotSCEHeatmap.R:    if(is.null(axis) || !axis %in% c('col', 'row')){
plotSCEHeatmap.R:    if(!useAssay %in% expDataNames(inSCE)){
plotSCEHeatmap.R:    if(!all(rowDataName %in% names(SummarizedExperiment::rowData(inSCE)))){
plotSCEHeatmap.R:        notIn <- !rowDataName %in% names(SummarizedExperiment::rowData(inSCE))
plotSCEHeatmap.R:    if(!all(colDataName %in% names(SummarizedExperiment::colData(inSCE)))){
plotSCEHeatmap.R:        notIn <- !colDataName %in% names(SummarizedExperiment::colData(inSCE))
plotSCEHeatmap.R:       any(!rowSplitBy %in% c(rowDataName, names(featureAnnotations)))){
plotSCEHeatmap.R:        notIn <- !rowSplitBy %in% c(names(SummarizedExperiment::rowData(inSCE)),
plotSCEHeatmap.R:       any(!colSplitBy %in% c(colDataName, names(cellAnnotations)))){
plotSCEHeatmap.R:        notIn <- !colSplitBy %in% c(names(SummarizedExperiment::colData(inSCE)),
plotSCEHeatmap.R:        featureIndex <- which(rownames(inSCE) %in% featureIndex)
plotSCEHeatmap.R:                if(!cellIndexBy %in%
plotSCEHeatmap.R:        cellIndex <- which(colnames(inSCE) %in% cellIndex)
plotSCEHeatmap.R:            if(!rowLabel %in% names(SummarizedExperiment::rowData(inSCE))){
plotSCEHeatmap.R:            if(!colLabel %in% names(SummarizedExperiment::colData(inSCE))){
plotSCEHeatmap.R:    if(0 %in% dim(inSCE)){
plotSCEHeatmap.R:        if(!all(rownames(inSCE) %in% rownames(featureAnnotations))){
plotSCEHeatmap.R:        if(!all(colnames(inSCE) %in% rownames(cellAnnotations))){
plotSCEHeatmap.R:        rowDataColor <- rowDataColor[rowDataName[rowDataName %in%
plotSCEHeatmap.R:        colDataColor <- colDataColor[colDataName[colDataName %in%
plotTSNE.R:  if(!(reducedDimName %in% names(SingleCellExperiment::reducedDims(inSCE)))){
plotTopHVG.R:    ggplot2::geom_point(ggplot2::aes(x = subset(x, rownames(inSCE) %in% hvgList[seq(n)]),
plotTopHVG.R:                   y = subset(y, rownames(inSCE) %in% hvgList[seq(n)])),
plotTopHVG.R:    ggplot2::geom_label(ggplot2::aes(x = subset(x, rownames(inSCE) %in% hvgList[seq(labelsCount)]),
plotTopHVG.R:                   y = subset(y, rownames(inSCE) %in% hvgList[seq(labelsCount)]),
plotTopHVG.R:                                  rownames(inSCE) %in% hvgList[seq(labelsCount)])),
plotUMAP.R:  if(!(reducedDimName %in% names(SingleCellExperiment::reducedDims(inSCE)))){
readSingleCellMatrix.R:    if (!(ext1 %in% c("mtx", "txt", "csv", "tab", "tsv",
readSingleCellMatrix.R:    if (ext1 %in% c("gz", "bz2", "xz")) {
readSingleCellMatrix.R:        if (!(ext2 %in% c("mtx", "txt", "csv", "tab", "npz"))) {
readSingleCellMatrix.R:    if (ext2 %in% c("txt", "csv", "tab", "tsv", "unknown")) {
runBatchCorrection.R:  if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
runBatchCorrection.R:  if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
runBatchCorrection.R:  if(any(!c(batch, covariates, bioCond) %in%
runBatchCorrection.R:    notFound <- which(!anns %in% names(SummarizedExperiment::colData(inSCE)))
runBatchCorrection.R:    if(!(useAssay %in% SingleCellExperiment::reducedDimNames(inSCE))) {
runBatchCorrection.R:    if(!(useAssay %in% SummarizedExperiment::assayNames(inSCE))) {
runBatchCorrection.R:  if(!(batch %in% names(SummarizedExperiment::colData(inSCE)))){
runBatchCorrection.R:#     if(!useAssay %in% SingleCellExperiment::reducedDimNames(inSCE)) {
runBatchCorrection.R:#     if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
runBatchCorrection.R:#   if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
runBatchCorrection.R:#   if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
runBatchCorrection.R:#   if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
runBatchCorrection.R:  if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
runBatchCorrection.R:  if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
runBatchCorrection.R:  if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
runBatchCorrection.R:  if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
runBatchCorrection.R:  if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
runBatchCorrection.R:  if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
runBatchCorrection.R:  if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
runBatchCorrection.R:  if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
runBatchCorrection.R:  if(!cellType %in% names(SummarizedExperiment::colData(inSCE))){
runBatchCorrection.R:  if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)) {
runBatchCorrection.R:  if(!batch %in% names(SummarizedExperiment::colData(inSCE))){
runDEAnalysis.R:    if(!useAssay %in% expDataNames(inSCE)){
runDEAnalysis.R:       !all(covariates %in% names(SummarizedExperiment::colData(inSCE)))){
runDEAnalysis.R:    if ("diffExp" %in% names(S4Vectors::metadata(inSCE))){
runDEAnalysis.R:        if(analysisName %in% names(S4Vectors::metadata(inSCE)$diffExp)){
runDEAnalysis.R:            if(!class %in% names(SummarizedExperiment::colData(inSCE))){
runDEAnalysis.R:        index1 <- class %in% classGroup1
runDEAnalysis.R:            index2 <- !class %in% classGroup1
runDEAnalysis.R:            index2 <- class %in% classGroup2
runDEAnalysis.R:    ix1 <- colnames(inSCE) %in% cells1
runDEAnalysis.R:    ix2 <- colnames(inSCE) %in% cells2
runDEAnalysis.R:    if ("diffExp" %in% names(S4Vectors::metadata(inSCE))){
runDEAnalysis.R:    if ("diffExp" %in% names(S4Vectors::metadata(inSCE))){
runDEAnalysis.R:    resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*%
runDEAnalysis.R:    resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*%
runDEAnalysis.R:    rss1 <- resid ^ 2 %*% rep(1, n)
runDEAnalysis.R:    rss0 <- resid0 ^ 2 %*% rep(1, n)
runDEAnalysis.R:    if ("diffExp" %in% names(S4Vectors::metadata(inSCE))){
runDEAnalysis.R:    if ("diffExp" %in% names(S4Vectors::metadata(inSCE))){
runDEAnalysis.R:  if ("diffExp" %in% names(S4Vectors::metadata(inSCE))){
runDimensionalityReduction.R:  if(useAssay %in% altExpNames(inSCE)){
runDimensionalityReduction.R:    if(method %in% c("seuratPCA", "seuratICA", "seuratTSNE", "seuratUMAP")){
runDimensionalityReduction.R:  if(method %in% c("seuratPCA", "seuratICA", "seuratTSNE", "seuratUMAP")){
runDimensionalityReduction.R:    if(useAssay %in% altExpNames(inSCE)){
runDimensionalityReduction.R:  if(useAssay %in% altExpNames(inSCE)){
runDimensionalityReduction.R:    if(method %in% c("seuratPCA", "seuratICA", "seuratRunTSNE", "seuratRunUMAP")){
runFeatureSelection.R:  if(hvgMethod %in% seuratMethods){
runFeatureSelection.R:  else if(hvgMethod %in% scranMethods){
runNormalization.R:    if(normalizationMethod %in% seuratMethods){
runNormalization.R:        if(normalizationMethod %in% c("LogNormalize", "CLR")){
runNormalization.R:    else if(normalizationMethod %in% scaterMethods){
runNormalization.R:  if("log2" %in% transformation){
runNormalization.R:  if("log1p" %in% transformation){
runNormalization.R:  if("sqrt" %in% transformation){
runQC.R:  if ("QCMetrics" %in% algorithms) {
runQC.R:  if ("scrublet" %in% algorithms) {
runQC.R:  if ("scDblFinder" %in% algorithms) {
runQC.R:  if ("doubletFinder" %in% algorithms) {
runQC.R:  if ("cxds" %in% algorithms) {
runQC.R:  if ("bcds" %in% algorithms) {
runQC.R:  if ("cxds_bcds_hybrid" %in% algorithms) {
runQC.R:  if ("decontX" %in% algorithms) {
runQC.R:  if ("QCMetrics" %in% algorithms) {
runQC.R:  if (any("emptyDrops" %in% algorithms)) {
runQC.R:  if (any("barcodeRanks" %in% algorithms)) {
sampleSummaryStats.R:    if ("sum" %in% colnames(SummarizedExperiment::colData(inSCE))) {
sampleSummaryStats.R:    if ("detected" %in% colnames(SummarizedExperiment::colData(inSCE))) {
sampleSummaryStats.R:        if ("dropletUtils_barcodeRank_knee" %in% colnames(SummarizedExperiment::colData(inSCE))) {
sampleSummaryStats.R:        if ("dropletUtils_barcodeRank_inflection" %in% colnames(SummarizedExperiment::colData(inSCE))) {
sampleSummaryStats.R:        if ("scrublet_call" %in% colnames(SummarizedExperiment::colData(inSCE))) {
sampleSummaryStats.R:        if ("scDblFinder_class" %in% colnames(SummarizedExperiment::colData(inSCE))) {
sampleSummaryStats.R:        if("scds_cxds_call" %in% colnames(SummarizedExperiment::colData(inSCE))){
sampleSummaryStats.R:        if("scds_bcds_call" %in% colnames(SummarizedExperiment::colData(inSCE))){
sampleSummaryStats.R:        if("scds_hybrid_call" %in% colnames(SummarizedExperiment::colData(inSCE))){
sampleSummaryStats.R:        if("decontX_clusters" %in% colnames(SummarizedExperiment::colData(inSCE))){
sampleSummaryStats.R:#' @importFrom magrittr %>%
sampleSummaryStats.R:    if(any(!c("sum", "detected") %in% colnames(SummarizedExperiment::colData(inSCE)))){
scDblFinder_doubletDetection.R:  argsList <- argsList[!names(argsList) %in% c("BPPARAM")]
scater_PCA.R:    if (!(useAltExp %in% SingleCellExperiment::altExpNames(inSCE))) {
scater_PCA.R:    if (!(useAssay %in% SummarizedExperiment::assayNames(sce))) {
scater_PCA.R:    if (!(useAssay %in% SummarizedExperiment::assayNames(inSCE))) {
scater_addPerCellQC.R:          gs.index <- which(rownames(inSCE) %in% gs.i)
scater_addPerCellQC.R:          gs.index <- which(rowData(inSCE)[,temp.location] %in% gs.i)
scater_addPerCellQC.R:  #argsList <- argsList[!names(argsList) %in% ("...")]
scater_addPerCellQC.R:  #dotList <- dotList[!names(dotList) %in% c("BPPARAM")]
scater_addPerCellQC.R:  argsList <- argsList[!names(argsList) %in% ("BPPARAM")]
scds_doubletdetection.R:          if ("cxds_call" %in% colnames(SummarizedExperiment::colData(result))) {
scds_doubletdetection.R:          if ("bcds_call" %in% colnames(SummarizedExperiment::colData(result))) {
scds_doubletdetection.R:          if ("hybrid_call" %in% colnames(SummarizedExperiment::colData(result))) {
sctkQCUtils.R:    if (any(!format %in% c("SCE", "AnnData", "FlatFile", "HTAN", "Seurat"))) {
sctkQCUtils.R:             paste(format[!format %in% c("SCE", "AnnData", "FlatFile", "HTAN")], sep = ","),
sctkQCUtils.R:    format <- format[format %in% c("SCE", "AnnData", "FlatFile", "HTAN", "Seurat")]
sctkQCUtils.R:    if ("SCE" %in% format) {
sctkQCUtils.R:    if ("FlatFile" %in% format) {
sctkQCUtils.R:    if ("AnnData" %in% format) {
sctkQCUtils.R:    if ("Seurat" %in% format) {
sctkQCUtils.R:  algos <- names(meta)[!names(meta) %in% skip]
sctkQCUtils.R:    params <- params[which(!names(params) %in% ignore)]
sctkTagging.R:    if(!assays %in% S4Vectors::metadata(inSCE)$assayType[[assayType]]){
sctkTagging.R:            if(assayName %in% altExpNames(inSCE)){
sctkTagging.R:            else if (assayName %in% reducedDimNames(inSCE)){
seuratFunctions.R:  if ("ident" %in% names(plot$data) &&
seuratFunctions.R:      "seurat_clusters" %in% names(seuratObject@meta.data)) {
seuratFunctions.R:  if(!is.null(countsAssay) && !(countsAssay %in% expDataNames(inSCE))) {
seuratFunctions.R:  if(!is.null(normAssay) && !(normAssay %in% expDataNames(inSCE))) {
seuratFunctions.R:  if(!is.null(scaledAssay) && !(scaledAssay %in% expDataNames(inSCE))) {
seuratFunctions.R:  if(!is.null(pcaReducedDim) && !(pcaReducedDim %in% reducedDimNames(inSCE))){
seuratFunctions.R:  if(!is.null(icaReducedDim) && !(icaReducedDim %in% reducedDimNames(inSCE))){
seuratFunctions.R:  if(!is.null(tsneReducedDim) && !(tsneReducedDim %in% reducedDimNames(inSCE))){
seuratFunctions.R:  if(!is.null(umapReducedDim) && !(umapReducedDim %in% reducedDimNames(inSCE))){
seuratFunctions.R:  if (!is.null(countsAssay) && countsAssay %in% names(assays(inSCE))) {
seuratFunctions.R:  if (!is.null(normAssay) && normAssay %in% names(assays(inSCE))) {
seuratFunctions.R:  if (!is.null(scaledAssay) && scaledAssay %in% names(assays(inSCE))) {
seuratFunctions.R:  if ("decontXcounts" %in% SummarizedExperiment::assayNames(inSCE) && copyDecontX) {
seuratFunctions.R:  if(!useAssay %in% SummarizedExperiment::assayNames(inSCE)){
subsetSCE.R:    final.ix[!seq(nrow(inSCE)) %in% index] <- FALSE
subsetSCE.R:    final.ix[!seq(ncol(inSCE)) %in% index] <- FALSE
Binary file sysdata.rda matches
visPlot.R:  if (!all(useAssay %in% names(assays(inSCE)))){
visPlot.R:  if (!all(glist %in% rownames(inSCE))){
