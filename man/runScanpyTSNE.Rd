% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scanpyFunctions.R
\name{runScanpyTSNE}
\alias{runScanpyTSNE}
\title{runScanpyTSNE
Computes tSNE from the given sce object and stores the tSNE computations back
into the sce object}
\usage{
runScanpyTSNE(
  inSCE,
  useAssay = NULL,
  useReduction = "scanpyPCA",
  reducedDimName = "scanpyTSNE",
  dims = 10L,
  perplexity = 15L,
  externalReduction = NULL
)
}
\arguments{
\item{inSCE}{(sce) object on which to compute the tSNE}

\item{useAssay}{Specify name of assay to use. Default is \code{NULL}, so
\code{useReduction} param will be used instead.}

\item{useReduction}{selected reduction method to use for computing tSNE.
Default \code{"pca"}.}

\item{reducedDimName}{Name of new reducedDims object containing Scanpy tSNE
Default \code{scanpyTSNE}.}

\item{dims}{Number of reduction components to use for tSNE computation.
Default \code{10}.}

\item{perplexity}{Adjust the perplexity tuneable parameter for the underlying
tSNE call. Default \code{15}.}

\item{externalReduction}{Pass DimReduc object if PCA computed through
other libraries. Default \code{NULL}.}
}
\value{
Updated sce object with tSNE computations stored
}
\description{
runScanpyTSNE
Computes tSNE from the given sce object and stores the tSNE computations back
into the sce object
}
\examples{
data(scExample, package = "singleCellTK")
\dontrun{
sce <- runScanpyNormalizeData(sce, useAssay = "counts")
sce <- runScanpyScaleData(sce, useAssay = "scanpyNormData")
sce <- runScanpyFindHVG(sce, useAssay = "scanpyScaledData", method = "seurat")
sce <- runScanpyPCA(sce, useAssay = "scanpyNormData")
sce <- runScanpyFindClusters(sce, useAssay = "counts")
sce <- runScanpyTSNE(sce, useReduction = "scanpyPCA")
}
}
