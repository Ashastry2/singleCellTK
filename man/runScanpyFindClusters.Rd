% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scanpyFunctions.R
\name{runScanpyFindClusters}
\alias{runScanpyFindClusters}
\title{runScanpyFindClusters
Computes the clusters from the input sce object and stores them back in sce
object}
\usage{
runScanpyFindClusters(
  inSCE,
  useAssay = "scanpyScaledData",
  useReduction = "scanpyPCA",
  nNeighbors = 15L,
  dims = 2L,
  algorithm = c("louvain", "leiden"),
  resolution,
  colDataName,
  niterations = -1,
  flavor = "vtraag",
  use_weights = FALSE,
  cor_method = "pearson",
  inplace = TRUE,
  externalReduction = NULL
)
}
\arguments{
\item{inSCE}{(sce) object from which clusters should be computed and stored
in}

\item{useAssay}{Assay containing scaled counts to use for clustering.}

\item{useReduction}{Reduction method to use for computing clusters. 
Default \code{"pca"}.}

\item{nNeighbors}{The size of local neighborhood (in terms of number of 
neighboring data points) used for manifold approximation. Larger values 
result in more global views of the manifold, while smaller values result in 
more local data being preserved. Default \code{15L}.}

\item{dims}{numeric value of how many components to use for computing
clusters. Default \code{10}.}

\item{algorithm}{selected algorithm to compute clusters. One of "louvain",
and "leiden". Default \code{louvain}.}

\item{resolution}{A parameter value controlling the coarseness of the 
clustering. Higher values lead to more clusters Default \code{1}.}

\item{colDataName}{colName to store the result in annData object}

\item{niterations}{How many iterations of the Leiden clustering algorithm to 
perform. Positive values above 2 define the total number of iterations to 
perform, -1 has the algorithm run until it reaches its optimal clustering.}

\item{flavor}{Choose between to packages for computing the clustering.}

\item{use_weights}{Boolean. Use weights from knn graph.}

\item{cor_method}{correlation method to use. Options are ‘pearson’, 
‘kendall’, and ‘spearman’. Default 'pearson'.}

\item{inplace}{If True, adds dendrogram information to annData object, 
else this function returns the information.}

\item{externalReduction}{Pass DimReduce object if PCA computed through
other libraries. Default \code{NULL}.}
}
\value{
Updated sce object which now contains the computed clusters
}
\description{
runScanpyFindClusters
Computes the clusters from the input sce object and stores them back in sce
object
}
\examples{
data(scExample, package = "singleCellTK")
\dontrun{
sce <- runScanpyNormalizeData(sce, useAssay = "counts")
sce <- runScanpyFindHVG(sce, useAssay = "counts")
sce <- runScanpyScaleData(sce, useAssay = "counts")
sce <- runScanpyPCA(sce, useAssay = "counts")
sce <- runScanpyFindClusters(sce, useAssay = "counts")
}
}
